/*===========================================================================
 * 프로그램명  :  trash(rm) for the Unix                                     
 * 파일명.     : trash.h
 * 제목        : 삭제된 프로그램의 복구를 해주는 휴지통 프로그램             
 * TAB크기를 2 로 설정하면 소스가 깨끗하게 보임
 *---------------------------------------------------------------------------
 * 라이브러리  :                                                             
 * 작  성  자  : igi
 * 헤더  화일  : trash.h                                                            
 * 작  성  일  : 98. 2. 20 ( 최종수정일 : 2017.8.21)                         
 *---------------------------------------------------------------------------
 * 기      능  : 삭제명령으로 삭제시 해당 화일을 휴지통에 복사를 하고        
 *               복구 명령으로 복구시 휴지통의 화일을 원래의 위치로          
 *               복사한다. 휴지통의 디렉토리는  ~/.trash 가 되며, 이 디렉토  
 *               리에 삭제된 화일이 옮겨진다.                                
 *               ~/.trash/.erase_date는 최종 자동 삭제 날짜가 기록되어       
 *               있으며, 이 날짜를 키로 하여, 하루에 두번 자동삭제 기능이    
 *               작동하지 않도록 한다.                                       
 *                                                                           
 *               복구시켜주는 것은 기존의 rm 명령으로 삭제된 화일은 복구가   
 *               안되며, 이 프로그램으로 삭제한 프로그램에 한하여,           
 *               복구가 가능하다.                                            
 *---------------------------------------------------------------------------
 *  < UPDATE HISTORY >                                                       
 *----+--------+------------------------------------------------------+------
 *
 *===========================================================================*/

#ifndef _TRASH_H_
#define _TRASH_H_


/* 휴지통의 이름 , 자신의 홈디렉토리 밑에  둔다. */

#ifndef TRASH_FOLDER

#ifdef __APPLE__
#define TRASH_FOLDER ".trash_folder"
#else
#define TRASH_FOLDER ".trash"
#endif
#endif

#ifndef ERASE_DATE
#define ERASE_DATE ".erase_date"
#endif



/* 휴지통을 화면에 보이게 할때 사용할  information 정보 */
#define HEAD_FILLER  " Trash Folder(2017/08             )              " \
           "                                       "

#define LICENSE_FILLER  \
        " Copyright(c), 1998 ~ 2017 by KANG, YOUNG-IG, \n" \
        " myjunu@gmail.com, http://mynuji.iptime.org  \n"  \
        " 기존의 rm 명령은 \\rm으로 사용하시면 됩니다. \n" \
        " 삭제 중 에러가 발생하면 \\rm명령으로\n" \
        " 사용하시고, E-mail로 에러를 알려주세요\n\n" \
        " 설치법: sh계열의 경우 .profile에, csh계열의 경우 .cshrc파일에\n"\
        "         아래의 항목을 추가한다. \n\n" \
        "         alias rm 'trash' \n" 

#define TITLE_FILENAME_FILLER  "   FILE NAME        "
#define TITLE_FILLER  " FILE_CTIME     SIZE     MODE      DELETE_TIME    "

/* 맨 아랫줄에 출력될 상태 라인 도움말 */
#define FOOT_FILLER  "^H:HELP f:SORT(FILE) d:SORT(DTIME) Enter:UNDEL " \
                     "^D:DEL SP:CHOOSE(Toggle) " \
                     "^X:EXIT"

/* 한 화면에 출력될 화일의 갯수 */
#define MAX_ITEM 19

/* 이렇게 키코드와 화면 인터페이스를 만들어 본것도 */
/* 5년만에 하게 되는군.. :(                        */
/* 키 정의 부분                                    */
#define    K_ESC      0x1B
#define    K_F1       0x1B4F50
#define    K_F5       0x1B4F74
#define    K_F6       0x1B4F75
#define    K_ENTER    0x0A
#define    K_DEL      0x7F
#define    K_PGUP     0x02
#define    K_PGDN     0x06
#define    K_UP       0x1B5B41   
#define    K_DOWN     0x1B5B42 
#define    K_RIGHT    0x1B5B43 
#define    K_LEFT     0x1B5B44
#define    K_SPACE    0x20
#define    KC_X       0x18
#define    KC_D       0x04
#define    KC_H       0x08

#define    K_BS       0x08

/* yes, no, all, cancel을 선택하는 메뉴에서 사용하게될 값 */
#define ITEM_YES 0x1
#define ITEM_NO  0x2
#define ITEM_ALL 0x4
#define ITEM_CANCEL 0x8


#define ISPRINT(ch) ( (ch & 0x80) ? 1 : isprint(ch) )

enum ECHO_TYPE {
  ECHO_ON,
  ECHO_OFF,
  ECHO_PASSWD
};

typedef struct date_t {
  int year;
  int month;
  int day;
  int hour;
  int min;
  int sec;
}date_t;

/* 휴지통을 가장 무식하게 만들어봤다.                        */
/* 휴지통에 있는 화일 모두를 램에 올려서 작업한다.           */
/* 인덱스화일을 만들어서도 사용할까 하는 생각도 했었지만     */
/* 그냥, 인덱스화일 없이 바로 구현하는 것이 조금더 안정적(?) */
/* 일것 같아서, 모든 화일 정보를 double linked list로 구현   */
/* 하게 되었다.  아래 struct는 각 화일에 관한 정보           */
typedef struct trash_t{
  char is_select;          /* 선택 유무 */
  char trash[256];          /* 휴지통에 저장된 실제 화일명 */
  char *f_name;            /* 삭제당시 원래 화일명 */
  char *path;              /* 삭제당시 원래 path명 */
  struct date_t d_time;    /* 삭제한 시간 */
  struct date_t o_time;    /* 화일의 시간 */ 
  int  mode;
  long size;               /* 화일의 크기 */
  struct trash_t *llink;
  struct trash_t *rlink;
} trash_t;


typedef struct menu_t{
  char name[10];
  char enable;
} menu_t;

#define WORD unsigned int


/*   a 가   '.' 또는 '..' 라면 1을 아니면 0을 반환 */
#define ISDOT(a)  (((a)[0] == '.') && ( (!(a)[1]) || ((a)[1] == '.')) && (!(a)[2]) )

#ifndef S_ISLNK 
#define S_ISLNK(m)      (((m)&(S_IFMT)) == (S_IFLNK))
#endif


void getWindowSize();
void do_resize(int dummy);

/*--------------------------------------------------------------------------
함수명 : int is_substring(char s[], char key[])
인수   : s 는  검색하게될 대상이 되는 문자열
         key는 검색의 키로 사용될 문자열로 '*', '?'등의 문자로 표현될수있다.
기능   : key로 사용된 문자열에 s가 포함되는지를 찾는 함수
반환   : 문자열(s)가 key에 포함된다면 1을, 아니면 0을 반환

사용예 :  is_substring("abcdefg", "abcdefg")  =>  1
          is_substring("abcdefg", "abcdeff")  =>  0
          is_substring("abcdefg", "abc*")     =>  1
          is_substring("abcdefg", "abc??fg")  =>  1
          is_substring("abcdefg", "a*c??fg")  =>  1
          is_substring("abcdefg", "*c??fg")   =>  1

***주의) 아직 완전한 검증을 받지 못함.. 테스트는 했는데.... 오랜 테스트
         시간없이 경우의 수만을 만들어서 만든 테스트라서 완전한 검증이되지
         못했다.
---------------------------------------------------------------------------*/
int is_substring(char s[], char key[]);



/*--------------------------------------------------------------------------
함수명 : init_link(trash_t *head)
기능   : list의 head를 초기화 한다.
반환   : 없음.
사용예 : init_link(&head);
-------------------------------------------------------------------------*/
void init_link(trash_t *head);

/*--------------------------------------------------------------------------
함수명 : add_link(trash_t *head, trash_t *node)
기능   : head의 list에 node를 추가한다
반환   : 없음.
사용예 : add_link(&head, &node);
-------------------------------------------------------------------------*/
void add_link(trash_t *head, trash_t *node);

/*--------------------------------------------------------------------------
함수명 : del_link(trash_t *head, trash_t *node)
기능   : head의 list에서 node를 삭제한다
반환   : 없음.
사용예 : del_link(&head, &node);
-------------------------------------------------------------------------*/
void del_link(trash_t *head, trash_t *node);

/*--------------------------------------------------------------------------
함수명 : destroy_link(trash_t *head)
기능   : head의 모든 list를 삭제한다.
반환   : 없음.
사용예 : destroy_link(&head);
-------------------------------------------------------------------------*/
void destroy_link(trash_t *head);

/*-------------------------------------------------------------------------*/
int readline(int fd, char *ptr, int maxlen);

/*--------------------------------------------------------------------------*/
void cursor_on();

/*--------------------------------------------------------------------------
함수명 : cls()
기능   : 화면 삭제하고 커서를 0,0 위치로 이동
반환   : 없음.
사용예 : cls()
-------------------------------------------------------------------------*/
void cls();

/*--------------------------------------------------------------------------
함수명 : gotoxy(int x, int y)
기능   : 커서를 x, y 좌표로 이동
반환   : 없음.
사용예 : gotoxy(x, y)
-------------------------------------------------------------------------*/
void gotoxy(int x, int y);

/*------------------------------------------------------------------------
함수명 : reverse_scr()
기능   : 출력모드를 역상으로 정의
반환   : 없음.
사용예 : reverse_scr()
-------------------------------------------------------------------------*/
void reverse_scr();

/*------------------------------------------------------------------------
함수명 : beep()
기능   : beep 발생
반환   : 없음.
사용예 : beep()
-------------------------------------------------------------------------*/
void beep();

/*------------------------------------------------------------------------
함수명 : norm_scr()
기능   : 출력모드를 일반모드로 전환
반환   : 없음.
사용예 : norm_scr()
-------------------------------------------------------------------------*/
void norm_scr();

/*------------------------------------------------------------------------
함수명 : save_scr()
기능   : 현재 커서의 위치를 저장
반환   : 없음.
사용예 : save_scr()
-------------------------------------------------------------------------*/
void save_scr();

/*------------------------------------------------------------------------
함수명 : restore_scr()
기능   : 저장된 커서 위치로 커서 이동
반환   : 없음.
사용예 : restore_scr()
-------------------------------------------------------------------------*/
void restore_scr();

/*------------------------------------------------------------------------
함수명 : bold_scr()
기능   : 굵은 글자 모드로 변경
반환   : 없음.
사용예 : bold_scr()
-------------------------------------------------------------------------*/
void bold_scr();

/*------------------------------------------------------------------------
함수명 : underline_scr()
기능   : 밑줄 긋기 모드로 변경 
반환   : 없음.
사용예 : underline_scr()
-------------------------------------------------------------------------*/
void underline_scr();

/*------------------------------------------------------------------------
함수명 : cls_eol()
기능   : 라인 삭제
반환   : 없음.
사용예 : cls_eol()
-------------------------------------------------------------------------*/
void cls_eol();

/*------------------------------------------------------------------------
함수명 : get_trash_file
기능   : 휴지통 디렉토리(.trash)에서 화일의 목록정보를 읽어온다.
         readdir()을 사용하여 휴지통 디렉토리에 있는 모든 화일의 정보를
         다 읽어오도록 한다. 하지만, 형식에 어긋나는 화일의 경우에는 
         그냥 스킵시키도록 한다.
인수   : head : 읽은 화일 정보를 저장할 linked list의 헤더 
반환   : 성공시에  읽은 화일의 갯수를, 그외는 -1을 반환
-------------------------------------------------------------------------*/
int get_trash_file(trash_t *head);

/*-------------------------------------------------------------------------
함수명 : str_chr_down(char *s, char ch)
기능   : strchr과 비슷한 함수이나, 차이점은 strchr은 처음부터 검색을 하는데
         str_chr_down은 뒤에서 부터 앞으로 검색을 해온다는 것이 큰 차이점이
         다. 
인수   :  s : 검색하게될 문자열
          ch : 키로 사용될 문자
사용예 :  t = str_chr_down("abcdefg/abcdef/ka", '/') => t="/ka"
--------------------------------------------------------------------------*/
char *str_chr_down(char *s, char ch);

/*---------------------------------------------------------------------------
함수명 : get_file_info(char *path, trash_t *node)
기능   : path의 화일명을 읽어서 삭제전의 path, file명, size를 읽어서
         node에 저장하는 작업을 한다.
반환   : 성공시 0을 , 실패시 -1을 반환
----------------------------------------------------------------------------*/
int get_file_info(char *path, trash_t *node);

/*-------------------------------------------------------------------------
함수명 : get_record(trash_t *head, char *path, struct stat sb, char *path)
기능   : 휴지통에서의 화일의 정보를 읽어와서 리스트(head)에 node를 추가
         시켜주는 함수, 
---------------------------------------------------------------------------*/
int get_record(struct trash_t *head, char *ptr, char *fname);

int chkWindowSize(int line, int column);

/*---------------------------------------------------------------------------
함수명 : prn_page(trash_t *head, trash_t *p)
기능   : p로 시작하는 리스트부터 화일의 정보를 화면에 한페이지 출력한다.
----------------------------------------------------------------------------*/
void prn_page(trash_t *head, trash_t *p) ;

/*---------------------------------------------------------------------------
함수명: prn_record(char i, trash_t *t)
기능  : t node의 자료를 화면에 출력한다.
        화일명, 삭제일, 화일 크기 등을 출력한다. 이때 화일 크기는
        1k 이하는 999B 로 표현하고 1M 이하는 999K로 그외는 999M로 표현했다.
----------------------------------------------------------------------------*/
void prn_record(int i, trash_t *t);

/*---------------------------------------------------------------------------
함수명 : prn_blank(char i)
기능   : 해당 좌표에 공백을 인쇄한다.
----------------------------------------------------------------------------*/
void prn_blank(int i);

/*---------------------------------------------------------------------------
함수명 : cursor_off(struct temio *tbufsave)
기능   : 터미날의 echo기능과 buffering기능을 없애는 역할을 한다.
         이 함수는 예전에 유닉스에 처음 접했을때 책에서 옮긴 함수로
         그냥 여기서도 사용하게 되었다. 문제가 많은 함수중 하나이다. 
----------------------------------------------------------------------------*/
void cursor_off( struct termios *tbufsave);


/*-------------------------------------------------------------------------
함수명 : restore(struct temio *tbufsave)
기능   : 터미날의 상태를 tbufsave로 정의한다.
         cursor_off()를 사용하기전의 상태로 되돌리기 위한 함수로 구현되었다.
--------------------------------------------------------------------------*/
void restore( struct termios *tbufsave);

/*-------------------------------------------------------------------------
함수명 : prn_head()
기능   : 단지 화면에 head 와 foot 영역에 문자열을 출력해 주는 함수 
--------------------------------------------------------------------------*/
void prn_head();

/*---------------------------------------------------------------------------
함수명 : prn_msg(char *s)
기능   : 두번째 줄에 에러메세지나 상태 메세지(s)를 출력한다.
---------------------------------------------------------------------------*/
void prn_msg( char *s);

/*--------------------------------------------------------------------------
함수명 : unerase()
기능   : 휴지통에 있는 화일을 읽어와서 선택한 화일을 삭제 저장 하는 메인함수
         너무나 오래간만에 화면 제어 프로그램을 짠것같다. 너무 오래된 탓인지,
         아니면, 라이브러리 구축 탓인지.. 웬지 짜기 싫음을 조금은 느끼게 
         되는게 현실이다. 조금만 바람 쉬고 와서 새로운 맘으로 계속 짜야겠다.
---------------------------------------------------------------------------*/

void unerase();

/*--------------------------------------------------------------------------
함수명 : pgdn_key(trash_t *head, trash_t **p, trash_t **t)
기능   : item을 아래로 한칸 이동, 이동할수 있으면 이동하고 할수없으면
         이동하지 못하게 에러로 반환
---------------------------------------------------------------------------*/
int pgdn_key(trash_t *head, trash_t **p, trash_t **t, int *cnt);



/*--------------------------------------------------------------------------
함수명 : pgup_key(trash_t *head, trash_t **p, trash_t **t)
기능   : item을 아래로 한칸 이동, 이동할수 있으면 이동하고 할수없으면
         이동하지 못하게 에러로 반환
---------------------------------------------------------------------------*/
int pgup_key(trash_t *head, trash_t **p, trash_t **t, int *cnt);
 

/*--------------------------------------------------------------------------
함수명 : down_key(trash_t *head, trash_t **p, trash_t **t)
기능   : item을 아래로 한칸 이동, 이동할수 있으면 이동하고 할수없으면
         이동하지 못하게 에러로 반환
---------------------------------------------------------------------------*/
int down_key(trash_t *head, trash_t **p, trash_t **t, int *cnt);
 

/*--------------------------------------------------------------------------
함수명 : up_key(trash_t *head, trash_t **p, trash_t **t)
기능   : item을 아래로 한칸 이동, 이동할수 있으면 이동하고 할수없으면
         이동하지 못하게 에러로 반환
---------------------------------------------------------------------------*/
int up_key(trash_t *head, trash_t **p, trash_t **t, int *cnt);

/*-------------------------------------------------------------------------
함수명 : void space_key(t, cnt)
기능   : 해당하는 t node의 is_select를 toggle시켜준다. 
         이 기능은 space를 눌렀을경우에 선택 유무를 표현하기 위해 사용한다. 
---------------------------------------------------------------------------*/
void space_key( struct trash_t *t, int cnt);

/*---------------------------------------------------------------------------
 함수명: int rmfile(char *f)
 기능  : f라는 화일을 삭제하는 루틴
         f가 디렉토리이고  dflag, rflag가 있다면 해당 디렉토리를 삭제한다.
---------------------------------------------------------------------------*/
int rmfile(char *f);

/*---------------------------------------------------------------------------
함수명 : rmtree(char *path)
기능   : path에 해당하는 디렉토리를 삭제한다. 
---------------------------------------------------------------------------*/
int rmtree(char *path);

/*--------------------------------------------------------------------------
함수명 : check(char *path, char *name, struct stat *sp)
기능   : iflag가 set 되어있다면, 삭제시 매번마다 삭제여부 입력받도록 하며,
         write acceptable이 아니면 삭제여부 입력받도록 한다
---------------------------------------------------------------------------*/
int check( char *path, char *name, struct stat *sp);


/*--------------------------------------------------------------------------
함수명 : checkdot(char **argv)
기능   : 
--------------------------------------------------------------------------*/
void checkdot(char **argv);

/*-----------------------------------------------------------------------
함수명 : prn_error(char *name, int val)
기능   : 에러코드와 에러메세지를 출력한다.
반환   :  무조건 1을 반환, 의미 없다..
------------------------------------------------------------------------*/
void prn_error( char *name, int val);

/*---------------------------------------------------------------------------
함수명 : usage()
기능   : 사용법을 출력하는 함수
반환   : 그냥 프로그램을 종료하면서, 1을 반환한다.
----------------------------------------------------------------------------*/
int usage();

/*----------------------------------------------------------------------------
함수명 : buildup_trash()
기능   : 휴지통으로 사용하게 될 디렉토리가 없다면 새로 생성하는 함수
         휴지통으로 사용하게될 디렉토리는 각 사용자의 홈디렉토리의 .trash
         의 디렉토리가 해당된다. ( '~/.trash' )
반환   : 생성시 오류 발생 하면 -1을 아니면 0을 반환
----------------------------------------------------------------------------*/
int buildup_trash();

/*--------------------------------------------------------------------------
함수명 : make_trash_file
기능   : 휴지통으로 보내게될 화일명을 만드는 함수로, 원래의 화일을 삭제
         하기 전에 먼저 휴지통의 어떤 화일명으로 복사를 한후에 원래의 화일을
         삭제하도록 휴지통이 설계되었다. 이때 사용하게될 휴지통에서 사용하게
         되는 화일명을 만드는 작업이 이 함수에서 이루어진다. 
         화일명을 만드는 법칙은 현재의 시간(즉, 1970년 1월 1일 09:00를 
         기점으로 하여 현재까지 몇초가 걸렸는지)을 화일명으로 하였고,
         중복성을 없애기 위해-동시에 여러화일이 삭제되거나 했을경우 -
         구분 코드로 알파벳코드를 붙이도록 하였다.
         처음 생성된 화일은 999999999.A 라는 화일명으로 생성되고 같은시간에
         생성된 화일명은 9999999999.B로 된다. 동시에 26개 이상이 넘을경우
         에는 999999999.Z 다음에는 999999999.AA 로 구분 필드가 하나더 늘어
         나게 되며, 위의 경우와 마찬가지로 마지막 알파벳이 Z가 될때까지 
         변경되게 된다. 단지, 생성되는 시간이 틀리다면, '*.A'로만으로 화일이
         생성된다.
반환   : 조합된 화일명이 반환된다.
-----------------------------------------------------------------------------*/
char *make_trash_file();

/*---------------------------------------------------------------------------
함수명 : path_of_the_old_file(char *path)
기능   : 현재의 작업 경로를 path에 추가시키는 함수
반환   : 재조합된 경로를 반환
----------------------------------------------------------------------------*/
char *path_of_the_old_file(char *path);

/*--------------------------------------------------------------------------
함수명:  fcopy(char *src, char *dest)
기능  :  화일을 복사하는 함수로, 원래의 화일을 휴지통으로 복사하는 함수
         복사할때 dest로 정의된 화일명으로 복사하기 전에, 상태정보(원래
         화일의 위치, 크기 등)을 먼저 등록하고, 그후에 화일을 이어서 복사
         한다.
반환  :  정상이면 0을 아니면 -1을 반환
--------------------------------------------------------------------------*/
int fcopy(char *src, char *dest);

/*---------------------------------------------------------------------------
함수명  : fmove(char *src, char *dest)
기능    : 화일을 복사하고 source화일을 삭제한다. 
반환    : 성공시에 0을 에러시에 -1을 반환 
----------------------------------------------------------------------------*/
int fmove( char *src, char *dest);

/*-------------------------------------------------------------------------
함수명 : xmalloc(size_t size)
기능   : size만큼 메모리를 할당받는 함수 
         이 함수는 GNU REF. GUIDE에 나오는 함수를 그대로 옮겼다.
         물론 주석 하나하나까지도 그냥 옮겼다.
         누구의 말로는 내가 다는 주석 스타일과 여기에 주석을 단 사람의 
         스타일이 비슷하다나...  그래서, 주석을 읽으면서, '무슨 암호
         코드 읽는 그런 암담한 생각이 드는것이 아닌, 정말 시를 사랑하고,
         음유할 줄아는 시(C)인인 듯한 느낌을 받는다' 라나... :)  
---------------------------------------------------------------------------*/
void *xmalloc(size_t size);

/*--------------------------------------------------------------------------
함수명 : gnu_getcwd()
기능   : 현재의 디렉토리를 구하는 함수
         GNU REF. GUIDE에서 가져온 함수, 주석은 내가 달았다.
반환   : path명을 반환한다.
---------------------------------------------------------------------------*/
char *gnu_getcwd();

/*-------------------------------------------------------------------------
함수명 : safe_erase(char *src)
기능   : src화일을 휴지통으로 보내고 기존의 화일을 삭제하는 함수
반환   : 성공시 0을, 에러시 -1을 반환
---------------------------------------------------------------------------*/
int safe_erase(char *src);

/*--------------------------------------------------------------------------
함수명:  str_chr(char *s, char ch)
기능  :  strchr(), rindex와 같은 함수로, strchr을 사용하니 프로그램에서
         계속 에러가 발생하여 새로 만들게 되었다.
반환  :  ch문자를 s에서 찾았다면 해당 포인터를 반환, 아니라면 NULL을 반환
---------------------------------------------------------------------------*/
char *str_chr(char *s, char ch);

/*---------------------------------------------------------------------------
함수명 : prn_reverse_record(int cnt, trash_t *t)
기능   : 
----------------------------------------------------------------------------*/
void prn_reverse_record( int cnt, trash_t *t);

int message_box( char buf[][100], char option);

void prn_menu( int x, int y, struct menu_t item, int cur_item);

void prn_reverse_menu( int x, int y, struct menu_t item, int cur_item);

void msg_box_draw(int x, int y);

int is_file_exist( trash_t *t);

int file_rebuild( char *src, trash_t *trash);

int restore_file(trash_t *head, trash_t **p, trash_t **t, int *cnt);

int delete_file(trash_t *head);
 
void help();


int dir_rebuild(char *path);


/*-------------------------------------------------------------------------
함수명 : swap_link(trash_t *x, trash_t *y)
기능   : 두개의 노드의 위치를 바꾸는 역할한다.
인수   : 교환할 두개의 노드를 입력받는다.
--------------------------------------------------------------------------*/
void swap_link( trash_t **x,  trash_t **y);

/*--------------------------------------------------------------------------
함수명: trash_compare
기능  : 문자열을 비교하여 두 형식의 같은지 다른지를 구한다.
반환  : 같으면 0을 다르면 -, + 값을 반환한다.
인수  : type이 0이면 화일명끼리 비교를 하며,
               그외값이면 날짜로 비교를 한다.
---------------------------------------------------------------------------*/
int trash_compare(trash_t *s1, trash_t *s2, char type);

void sort(trash_t *head, char type);
     
/*---------------------------------------------------------------------------
함수명 : _read(int fd, char *buf, char cnt, int timeout, char flag)
기능   : 키보드로부터 NONBLOCKING 되게 읽어온다.
---------------------------------------------------------------------------*/
int _read( int fd, char *buf, char cnt, int timeout, char flag);

/*===========================================================================*/
/* 함  수  명   : _ansi_key                                                  */
/* 제      목   : ANSI   단말기 KEY 입력 처리                                */
/*---------------------------------------------------------------------------*/
unsigned int  _getch(int     timeout, int flag);

/*--------------------------------------------------------------------------
함수명 : getch()
기능   : 하나의 문자를 키보드로 부터 받아오는 함수
반환   : 키보드에서 읽은 키 코드 
--------------------------------------------------------------------------*/
unsigned int getch();


/*---------------------------------------------------------------------------
함수명 : getdata(char *prompt, char *buf, int len, enum ECHO_TYPE echo_type)
기능   : 현재 커서위치로 부터 문자열 prompt를 출력하고 문자열 길이len 만큼 
         키보드로 입력받아 buf에 저장하고 입력받은 char수를 변환시켜주는 함수
반환   : 입력된 글자수
          -1 -> ESC나 다른 여러값으로 취소시켰을 경우 발생
변수   : prompt : 출력될 문자열
         buf    : 입력된 키가 저장될 변수
         len    : 입력할 문자열 수
         echotype: echo여부.
                  ECHO_ON 일때 문자 출력되고,
                  ECHO_OFF일때 문자출력이 되지 않고,
                  ECHO_PASSWD일때 문자대신 '*'로 대치되어서 출력됨.
---------------------------------------------------------------------------*/
int getdata(char *prompt, char *buf, int len, enum ECHO_TYPE echo_type);


/*---------------------------------------------------------------------------
함수명 : erase_old_file(int day)
기능   : ~/.trash  디렉토리의 화일중에서  day일 이전의 화일을 삭제한다.
         디스크 full나는 것을 방지하기 위해... 자동 삭제(휴지통 정리)
         를 한다.
         ~/.trash/.erase_date 화일을 검색하여, 삭제작업을 한 최종 날짜 
         를 얻어, 하루에 두번 이상 삭제하는 작업을 하지 않도록 한다.

인수   : day  삭제할 일수.
          0 : 오늘 자료만 남기고 모두 삭제
          1 : 전일 자료까지만 남기고 그 전일 자료는 삭제
          2 : 이틀전 자료까지만 남기고 그 전일 자료는 삭제(오래된 자료 삭제)
---------------------------------------------------------------------------*/
int erase_old_file(int day);

#endif
